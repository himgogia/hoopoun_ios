// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;
@class UIColor;
@class UIFont;

SWIFT_CLASS("_TtC21SJSegmentedScrollView12SJSegmentTab")
@interface SJSegmentTab : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)titleColor:(UIColor * _Nonnull)color;
- (void)titleFont:(UIFont * _Nonnull)font;
@end

@class SJShadow;
@protocol SJSegmentedViewControllerDelegate;
@class NSBundle;

/// Public class for customizing and setting our segmented scroll view
SWIFT_CLASS("_TtC21SJSegmentedScrollView25SJSegmentedViewController")
@interface SJSegmentedViewController : UIViewController
/// The headerview height for ‘Header’.
/// By default the height will be 0.0
/// segmentedViewController.headerViewHeight = 200.0
@property (nonatomic) CGFloat headerViewHeight;
/// Set height for segment view.
/// By default the height is 40.0
/// segmentedViewController.segmentViewHeight = 60.0
@property (nonatomic) CGFloat segmentViewHeight;
/// Set headerview offset height.
/// By default the height is 0.0
/// segmentedViewController. headerViewOffsetHeight = 10.0
@property (nonatomic) CGFloat headerViewOffsetHeight;
/// Set color for selected segment.
/// By default the color is light gray.
/// segmentedViewController.selectedSegmentViewColor = UIColor.redColor()
@property (nonatomic, strong) UIColor * _Nonnull selectedSegmentViewColor;
/// Set height for selected segment view.
/// By default the height is 5.0
/// segmentedViewController.selectedSegmentViewHeight = 5.0
@property (nonatomic) CGFloat selectedSegmentViewHeight;
/// Set color for segment title.
/// By default the color is black.
/// segmentedViewController.segmentTitleColor = UIColor.redColor()
@property (nonatomic, strong) UIColor * _Nonnull segmentTitleColor;
/// Set color for segment background.
/// By default the color is white.
/// segmentedViewController.segmentBackgroundColor = UIColor.whiteColor()
@property (nonatomic, strong) UIColor * _Nonnull segmentBackgroundColor;
/// Set shadow for segment.
/// By default the color is light gray.
/// segmentedViewController.segmentShadow = SJShadow.light()
@property (nonatomic, strong) SJShadow * _Nonnull segmentShadow;
/// Set font for segment title.
/// segmentedViewController.segmentTitleFont = UIFont.systemFontOfSize(14.0)
@property (nonatomic, strong) UIFont * _Nonnull segmentTitleFont;
/// Set bounce for segment.
/// By default it is set to false.
/// segmentedViewController.segmentBounces = true
@property (nonatomic) BOOL segmentBounces;
/// Set ViewController for header view.
@property (nonatomic, strong) UIViewController * _Nullable headerViewController;
/// Array of ViewControllers for segments.
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull segmentControllers;
/// Array of segments. For single view controller segments will be empty.
@property (nonatomic, readonly, copy) NSArray<SJSegmentTab *> * _Nonnull segments;
/// Set color of SegmentedScrollView.
/// By default it is set to white.
/// segmentedScrollView.backgroundColor  = UIColor.white
@property (nonatomic, strong) UIColor * _Nonnull segmentedScrollViewColor;
/// <ul>
///   <li>
///     Set vertical scroll indicator.
///   </li>
///   <li>
///   </li>
///   <li>
///     By default true.
///   </li>
///   <li>
///   </li>
///   <li>
///     segmentedScrollView.showsVerticalScrollIndicator = false
///   </li>
/// </ul>
@property (nonatomic) BOOL showsVerticalScrollIndicator;
/// <ul>
///   <li>
///     Set horizontal scroll indicator.
///   </li>
///   <li>
///   </li>
///   <li>
///     By default true.
///   </li>
///   <li>
///   </li>
///   <li>
///     segmentedScrollView.showsHorizontalScrollIndicator = false
///   </li>
/// </ul>
@property (nonatomic) BOOL showsHorizontalScrollIndicator;
@property (nonatomic, weak) id <SJSegmentedViewControllerDelegate> _Nullable delegate;
/// Custom initializer for SJSegmentedViewController.
/// \param headerViewController A UIViewController
///
/// \param segmentControllers Array of UIViewControllers for segments.
///
- (nonnull instancetype)initWithHeaderViewController:(UIViewController * _Nullable)headerViewController segmentControllers:(NSArray<UIViewController *> * _Nonnull)segmentControllers;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
/// Update view as per the current layout
- (void)viewDidLayoutSubviews;
/// <ul>
///   <li>
///     To select segment programmatically
///   </li>
///   <li>
///     <ul>
///       <li>
///         parameter index Int Segment index
///       </li>
///     </ul>
///   </li>
///   <li>
///     <ul>
///       <li>
///         parameter animated Bool Move with an animation or not.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)setSelectedSegmentAt:(NSInteger)index animated:(BOOL)animated;
@end


SWIFT_PROTOCOL("_TtP21SJSegmentedScrollView33SJSegmentedViewControllerDelegate_")
@protocol SJSegmentedViewControllerDelegate
@optional
- (void)didSelectSegmentAtIndex:(NSInteger)index;
/// Method to identify the current controller and segment of contentview
/// \param controller Current controller
///
/// \param segment selected segment
///
/// \param index index of selected segment.
///
- (void)didMoveToPage:(UIViewController * _Nonnull)controller segment:(SJSegmentTab * _Nullable)segment index:(NSInteger)index;
@end


/// Public protocol of  SJSegmentedViewController for content changes and makes the scroll effect.
SWIFT_PROTOCOL("_TtP21SJSegmentedScrollView35SJSegmentedViewControllerViewSource_")
@protocol SJSegmentedViewControllerViewSource
@optional
/// By default, SJSegmentedScrollView will observe the default view of viewcontroller for content
/// changes and makes the scroll effect. If you want to change the default view, implement
/// SJSegmentedViewControllerViewSource and pass your custom view.
///
/// returns:
/// observe view
- (UIView * _Nonnull)viewForSegmentControllerToObserveContentOffsetChange SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC21SJSegmentedScrollView8SJShadow")
@interface SJShadow : NSObject
/// To create a custom shadow object.
/// \param offset CGSize, shadow size
///
/// \param color UIColor, shadow color
///
/// \param radius CGFloat, shadow radius
///
/// \param opacity Float, shadow opacity
///
///
/// returns:
/// SJShadow
- (nonnull instancetype)initWithOffset:(CGSize)offset color:(UIColor * _Nonnull)color radius:(CGFloat)radius opacity:(float)opacity;
/// Create light shadow
///
/// returns:
/// light SJShadow object
+ (SJShadow * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// Create Medium shadow
///
/// returns:
/// medium SJShadow object
+ (SJShadow * _Nonnull)medium SWIFT_WARN_UNUSED_RESULT;
/// Create dark shadow
///
/// returns:
/// dark SJShadow object
+ (SJShadow * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
